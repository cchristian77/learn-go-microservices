# https://taskfile.dev

version: '3'

vars:
  SHELL: cmd.exe
  FRONT_END_BINARY: frontApp.exe
  FRONT_END_DIR: /front-end
  BROKER_BINARY: brokerApp
  BROKER_DIR: /broker-service
  PROJECT_DIR: /project

tasks:

  up:
    desc: starts all containers in the background without forcing build
    dir: '{{.PROJECT_DIR}}'
    cmds:
      - echo Starting Docker images...
      - docker compose up -d
      - echo Docker images started!
    silent: true

  up_build:
    desc: stops docker-compose (if running), builds all projects and starts docker compose
    dir: '{{.PROJECT_DIR}}'
    cmds:
      - task: build_broker
      - echo 'Stopping docker images (if running...)'
      - docker compose down
      - echo 'Building (when required) and starting docker images...'
      - docker compose up --build -d
      - echo 'Docker images built and started!'
    silent: true

  down:
    desc: stop docker compose
    dir: '{{.PROJECT_DIR}}'
    cmds:
      - echo 'Stopping docker compose...'
      - docker compose down
      - echo 'Done!'
    silent: true

  build_broker:
    desc: builds the broker binary as a linux executable
    dir: '{{.BROKER_DIR}}'
    cmds:
      - echo 'Building broker binary...'
      - set GOOS=linux
      - set GOARCH=amd64
      - set CGO_ENABLED=0
      - go build -o {{.BROKER_BINARY}} ./cmd/api
      - echo 'Done!'
    silent: true

  build_front:
    desc: builds the front end binary
    dir: '{{.FRONT_END_DIR}}'
    cmds:
      - echo Building front end binary...
      - set CGO_ENABLED=0
      - set GOOS=windows
      - go build -o {{.FRONT_END_BINARY}} ./cmd/web
    silent: true

  start:
    desc: starts the front end
    dir: '{{.FRONT_END_DIR}}'
    cmds:
      - task: build_front
      - echo 'Starting front end...'
      - cmd: ./{{.FRONT_END_BINARY}}
        ignore_error: true
    silent: false

  stop:
    desc: stop the front end
    cmds:
      - echo 'Stopping front end...'
      - taskkill /IM "{{.FRONT_END_BINARY}}" /F
      - echo 'Stopping front end...'
    silent: true



